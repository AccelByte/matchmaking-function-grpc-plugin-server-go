// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: matchFunction.proto

package matchfunction

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetStatCodes
type GetStatCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules *Rules `protobuf:"bytes,1,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *GetStatCodesRequest) Reset() {
	*x = GetStatCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatCodesRequest) ProtoMessage() {}

func (x *GetStatCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatCodesRequest.ProtoReflect.Descriptor instead.
func (*GetStatCodesRequest) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{0}
}

func (x *GetStatCodesRequest) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type StatCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []string `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *StatCodesResponse) Reset() {
	*x = StatCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatCodesResponse) ProtoMessage() {}

func (x *StatCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatCodesResponse.ProtoReflect.Descriptor instead.
func (*StatCodesResponse) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{1}
}

func (x *StatCodesResponse) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

// ValidateTicket
type ValidateTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Rules  *Rules  `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ValidateTicketRequest) Reset() {
	*x = ValidateTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTicketRequest) ProtoMessage() {}

func (x *ValidateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTicketRequest.ProtoReflect.Descriptor instead.
func (*ValidateTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateTicketRequest) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *ValidateTicketRequest) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ValidateTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidTicket bool `protobuf:"varint,1,opt,name=valid_ticket,json=validTicket,proto3" json:"valid_ticket,omitempty"`
}

func (x *ValidateTicketResponse) Reset() {
	*x = ValidateTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTicketResponse) ProtoMessage() {}

func (x *ValidateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTicketResponse.ProtoReflect.Descriptor instead.
func (*ValidateTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateTicketResponse) GetValidTicket() bool {
	if x != nil {
		return x.ValidTicket
	}
	return false
}

// EnrichTicket
type EnrichTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Rules  *Rules  `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *EnrichTicketRequest) Reset() {
	*x = EnrichTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichTicketRequest) ProtoMessage() {}

func (x *EnrichTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichTicketRequest.ProtoReflect.Descriptor instead.
func (*EnrichTicketRequest) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{4}
}

func (x *EnrichTicketRequest) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *EnrichTicketRequest) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type EnrichTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *EnrichTicketResponse) Reset() {
	*x = EnrichTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichTicketResponse) ProtoMessage() {}

func (x *EnrichTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichTicketResponse.ProtoReflect.Descriptor instead.
func (*EnrichTicketResponse) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{5}
}

func (x *EnrichTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

// Make Matches
type MakeMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*MakeMatchesRequest_Parameters
	//	*MakeMatchesRequest_Ticket
	RequestType isMakeMatchesRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *MakeMatchesRequest) Reset() {
	*x = MakeMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMatchesRequest) ProtoMessage() {}

func (x *MakeMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMatchesRequest.ProtoReflect.Descriptor instead.
func (*MakeMatchesRequest) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{6}
}

func (m *MakeMatchesRequest) GetRequestType() isMakeMatchesRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *MakeMatchesRequest) GetParameters() *MakeMatchesRequest_MakeMatchesParameters {
	if x, ok := x.GetRequestType().(*MakeMatchesRequest_Parameters); ok {
		return x.Parameters
	}
	return nil
}

func (x *MakeMatchesRequest) GetTicket() *Ticket {
	if x, ok := x.GetRequestType().(*MakeMatchesRequest_Ticket); ok {
		return x.Ticket
	}
	return nil
}

type isMakeMatchesRequest_RequestType interface {
	isMakeMatchesRequest_RequestType()
}

type MakeMatchesRequest_Parameters struct {
	Parameters *MakeMatchesRequest_MakeMatchesParameters `protobuf:"bytes,1,opt,name=parameters,proto3,oneof"`
}

type MakeMatchesRequest_Ticket struct {
	Ticket *Ticket `protobuf:"bytes,2,opt,name=ticket,proto3,oneof"`
}

func (*MakeMatchesRequest_Parameters) isMakeMatchesRequest_RequestType() {}

func (*MakeMatchesRequest_Ticket) isMakeMatchesRequest_RequestType() {}

type MatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *MatchResponse) Reset() {
	*x = MatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResponse) ProtoMessage() {}

func (x *MatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResponse.ProtoReflect.Descriptor instead.
func (*MatchResponse) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{7}
}

func (x *MatchResponse) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbTraceId string `protobuf:"bytes,1,opt,name=ab_trace_id,json=abTraceId,proto3" json:"ab_trace_id,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{8}
}

func (x *Scope) GetAbTraceId() string {
	if x != nil {
		return x.AbTraceId
	}
	return ""
}

type Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Rules) Reset() {
	*x = Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rules) ProtoMessage() {}

func (x *Rules) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rules.ProtoReflect.Descriptor instead.
func (*Rules) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{9}
}

func (x *Rules) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId string   `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{10}
}

func (x *Party) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Party) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets           []*Ticket        `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Teams             []*Match_Team    `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
	RegionPreferences []string         `protobuf:"bytes,3,rep,name=region_preferences,json=regionPreferences,proto3" json:"region_preferences,omitempty"`
	MatchAttributes   *structpb.Struct `protobuf:"bytes,4,opt,name=match_attributes,json=matchAttributes,proto3" json:"match_attributes,omitempty"`
	Backfill          bool             `protobuf:"varint,5,opt,name=backfill,proto3" json:"backfill,omitempty"`
	ServerName        string           `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ClientVersion     string           `protobuf:"bytes,7,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ServerPool        *ServerPool      `protobuf:"bytes,8,opt,name=server_pool,json=serverPool,proto3" json:"server_pool,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{11}
}

func (x *Match) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Match) GetTeams() []*Match_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Match) GetRegionPreferences() []string {
	if x != nil {
		return x.RegionPreferences
	}
	return nil
}

func (x *Match) GetMatchAttributes() *structpb.Struct {
	if x != nil {
		return x.MatchAttributes
	}
	return nil
}

func (x *Match) GetBackfill() bool {
	if x != nil {
		return x.Backfill
	}
	return false
}

func (x *Match) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *Match) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *Match) GetServerPool() *ServerPool {
	if x != nil {
		return x.ServerPool
	}
	return nil
}

type ServerPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerProvider string   `protobuf:"bytes,1,opt,name=server_provider,json=serverProvider,proto3" json:"server_provider,omitempty"`
	Deployment     string   `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	ClaimKeys      []string `protobuf:"bytes,3,rep,name=claim_keys,json=claimKeys,proto3" json:"claim_keys,omitempty"`
}

func (x *ServerPool) Reset() {
	*x = ServerPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerPool) ProtoMessage() {}

func (x *ServerPool) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerPool.ProtoReflect.Descriptor instead.
func (*ServerPool) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{12}
}

func (x *ServerPool) GetServerProvider() string {
	if x != nil {
		return x.ServerProvider
	}
	return ""
}

func (x *ServerPool) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *ServerPool) GetClaimKeys() []string {
	if x != nil {
		return x.ClaimKeys
	}
	return nil
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId         string                 `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	MatchPool        string                 `protobuf:"bytes,2,opt,name=match_pool,json=matchPool,proto3" json:"match_pool,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Players          []*Ticket_PlayerData   `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	TicketAttributes *structpb.Struct       `protobuf:"bytes,5,opt,name=ticket_attributes,json=ticketAttributes,proto3" json:"ticket_attributes,omitempty"`
	Latencies        map[string]int64       `protobuf:"bytes,6,rep,name=latencies,proto3" json:"latencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PartySessionId   string                 `protobuf:"bytes,7,opt,name=party_session_id,json=partySessionId,proto3" json:"party_session_id,omitempty"`
	Namespace        string                 `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{13}
}

func (x *Ticket) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *Ticket) GetMatchPool() string {
	if x != nil {
		return x.MatchPool
	}
	return ""
}

func (x *Ticket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetPlayers() []*Ticket_PlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Ticket) GetTicketAttributes() *structpb.Struct {
	if x != nil {
		return x.TicketAttributes
	}
	return nil
}

func (x *Ticket) GetLatencies() map[string]int64 {
	if x != nil {
		return x.Latencies
	}
	return nil
}

func (x *Ticket) GetPartySessionId() string {
	if x != nil {
		return x.PartySessionId
	}
	return ""
}

func (x *Ticket) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Backfill
type BackfillProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackfillTicketId string                   `protobuf:"bytes,1,opt,name=backfill_ticket_id,json=backfillTicketId,proto3" json:"backfill_ticket_id,omitempty"`
	CreatedAt        *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	AddedTickets     []*Ticket                `protobuf:"bytes,3,rep,name=added_tickets,json=addedTickets,proto3" json:"added_tickets,omitempty"`
	ProposedTeams    []*BackfillProposal_Team `protobuf:"bytes,4,rep,name=proposed_teams,json=proposedTeams,proto3" json:"proposed_teams,omitempty"`
	ProposalId       string                   `protobuf:"bytes,5,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	MatchPool        string                   `protobuf:"bytes,6,opt,name=match_pool,json=matchPool,proto3" json:"match_pool,omitempty"`
	MatchSessionId   string                   `protobuf:"bytes,7,opt,name=match_session_id,json=matchSessionId,proto3" json:"match_session_id,omitempty"`
}

func (x *BackfillProposal) Reset() {
	*x = BackfillProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillProposal) ProtoMessage() {}

func (x *BackfillProposal) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillProposal.ProtoReflect.Descriptor instead.
func (*BackfillProposal) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{14}
}

func (x *BackfillProposal) GetBackfillTicketId() string {
	if x != nil {
		return x.BackfillTicketId
	}
	return ""
}

func (x *BackfillProposal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BackfillProposal) GetAddedTickets() []*Ticket {
	if x != nil {
		return x.AddedTickets
	}
	return nil
}

func (x *BackfillProposal) GetProposedTeams() []*BackfillProposal_Team {
	if x != nil {
		return x.ProposedTeams
	}
	return nil
}

func (x *BackfillProposal) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *BackfillProposal) GetMatchPool() string {
	if x != nil {
		return x.MatchPool
	}
	return ""
}

func (x *BackfillProposal) GetMatchSessionId() string {
	if x != nil {
		return x.MatchSessionId
	}
	return ""
}

// Backfill Make Matches
type BackfillMakeMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*BackfillMakeMatchesRequest_Parameters
	//	*BackfillMakeMatchesRequest_BackfillTicket
	//	*BackfillMakeMatchesRequest_Ticket
	RequestType isBackfillMakeMatchesRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *BackfillMakeMatchesRequest) Reset() {
	*x = BackfillMakeMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillMakeMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillMakeMatchesRequest) ProtoMessage() {}

func (x *BackfillMakeMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillMakeMatchesRequest.ProtoReflect.Descriptor instead.
func (*BackfillMakeMatchesRequest) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{15}
}

func (m *BackfillMakeMatchesRequest) GetRequestType() isBackfillMakeMatchesRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *BackfillMakeMatchesRequest) GetParameters() *BackfillMakeMatchesRequest_MakeMatchesParameters {
	if x, ok := x.GetRequestType().(*BackfillMakeMatchesRequest_Parameters); ok {
		return x.Parameters
	}
	return nil
}

func (x *BackfillMakeMatchesRequest) GetBackfillTicket() *BackfillTicket {
	if x, ok := x.GetRequestType().(*BackfillMakeMatchesRequest_BackfillTicket); ok {
		return x.BackfillTicket
	}
	return nil
}

func (x *BackfillMakeMatchesRequest) GetTicket() *Ticket {
	if x, ok := x.GetRequestType().(*BackfillMakeMatchesRequest_Ticket); ok {
		return x.Ticket
	}
	return nil
}

type isBackfillMakeMatchesRequest_RequestType interface {
	isBackfillMakeMatchesRequest_RequestType()
}

type BackfillMakeMatchesRequest_Parameters struct {
	Parameters *BackfillMakeMatchesRequest_MakeMatchesParameters `protobuf:"bytes,1,opt,name=parameters,proto3,oneof"`
}

type BackfillMakeMatchesRequest_BackfillTicket struct {
	BackfillTicket *BackfillTicket `protobuf:"bytes,2,opt,name=backfill_ticket,json=backfillTicket,proto3,oneof"`
}

type BackfillMakeMatchesRequest_Ticket struct {
	Ticket *Ticket `protobuf:"bytes,3,opt,name=ticket,proto3,oneof"`
}

func (*BackfillMakeMatchesRequest_Parameters) isBackfillMakeMatchesRequest_RequestType() {}

func (*BackfillMakeMatchesRequest_BackfillTicket) isBackfillMakeMatchesRequest_RequestType() {}

func (*BackfillMakeMatchesRequest_Ticket) isBackfillMakeMatchesRequest_RequestType() {}

type BackfillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackfillProposal *BackfillProposal `protobuf:"bytes,1,opt,name=backfill_proposal,json=backfillProposal,proto3" json:"backfill_proposal,omitempty"`
}

func (x *BackfillResponse) Reset() {
	*x = BackfillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillResponse) ProtoMessage() {}

func (x *BackfillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillResponse.ProtoReflect.Descriptor instead.
func (*BackfillResponse) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{16}
}

func (x *BackfillResponse) GetBackfillProposal() *BackfillProposal {
	if x != nil {
		return x.BackfillProposal
	}
	return nil
}

type BackfillTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId       string                       `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	MatchPool      string                       `protobuf:"bytes,2,opt,name=match_pool,json=matchPool,proto3" json:"match_pool,omitempty"`
	CreatedAt      *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	PartialMatch   *BackfillTicket_PartialMatch `protobuf:"bytes,4,opt,name=partial_match,json=partialMatch,proto3" json:"partial_match,omitempty"`
	MatchSessionId string                       `protobuf:"bytes,5,opt,name=match_session_id,json=matchSessionId,proto3" json:"match_session_id,omitempty"`
}

func (x *BackfillTicket) Reset() {
	*x = BackfillTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillTicket) ProtoMessage() {}

func (x *BackfillTicket) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillTicket.ProtoReflect.Descriptor instead.
func (*BackfillTicket) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{17}
}

func (x *BackfillTicket) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *BackfillTicket) GetMatchPool() string {
	if x != nil {
		return x.MatchPool
	}
	return ""
}

func (x *BackfillTicket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BackfillTicket) GetPartialMatch() *BackfillTicket_PartialMatch {
	if x != nil {
		return x.PartialMatch
	}
	return nil
}

func (x *BackfillTicket) GetMatchSessionId() string {
	if x != nil {
		return x.MatchSessionId
	}
	return ""
}

type MakeMatchesRequest_MakeMatchesParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  *Scope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Rules  *Rules `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
	TickId uint64 `protobuf:"varint,3,opt,name=tickId,proto3" json:"tickId,omitempty"`
}

func (x *MakeMatchesRequest_MakeMatchesParameters) Reset() {
	*x = MakeMatchesRequest_MakeMatchesParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMatchesRequest_MakeMatchesParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMatchesRequest_MakeMatchesParameters) ProtoMessage() {}

func (x *MakeMatchesRequest_MakeMatchesParameters) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMatchesRequest_MakeMatchesParameters.ProtoReflect.Descriptor instead.
func (*MakeMatchesRequest_MakeMatchesParameters) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MakeMatchesRequest_MakeMatchesParameters) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MakeMatchesRequest_MakeMatchesParameters) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *MakeMatchesRequest_MakeMatchesParameters) GetTickId() uint64 {
	if x != nil {
		return x.TickId
	}
	return 0
}

type Match_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Parties []*Party `protobuf:"bytes,2,rep,name=parties,proto3" json:"parties,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *Match_Team) Reset() {
	*x = Match_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match_Team) ProtoMessage() {}

func (x *Match_Team) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match_Team.ProtoReflect.Descriptor instead.
func (*Match_Team) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Match_Team) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *Match_Team) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *Match_Team) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type Ticket_PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   string           `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Attributes *structpb.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Ticket_PlayerData) Reset() {
	*x = Ticket_PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket_PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket_PlayerData) ProtoMessage() {}

func (x *Ticket_PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket_PlayerData.ProtoReflect.Descriptor instead.
func (*Ticket_PlayerData) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Ticket_PlayerData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Ticket_PlayerData) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type BackfillProposal_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Parties []*Party `protobuf:"bytes,2,rep,name=parties,proto3" json:"parties,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *BackfillProposal_Team) Reset() {
	*x = BackfillProposal_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillProposal_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillProposal_Team) ProtoMessage() {}

func (x *BackfillProposal_Team) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillProposal_Team.ProtoReflect.Descriptor instead.
func (*BackfillProposal_Team) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{14, 0}
}

func (x *BackfillProposal_Team) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BackfillProposal_Team) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *BackfillProposal_Team) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type BackfillMakeMatchesRequest_MakeMatchesParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  *Scope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Rules  *Rules `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
	TickId uint64 `protobuf:"varint,3,opt,name=tickId,proto3" json:"tickId,omitempty"`
}

func (x *BackfillMakeMatchesRequest_MakeMatchesParameters) Reset() {
	*x = BackfillMakeMatchesRequest_MakeMatchesParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillMakeMatchesRequest_MakeMatchesParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillMakeMatchesRequest_MakeMatchesParameters) ProtoMessage() {}

func (x *BackfillMakeMatchesRequest_MakeMatchesParameters) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillMakeMatchesRequest_MakeMatchesParameters.ProtoReflect.Descriptor instead.
func (*BackfillMakeMatchesRequest_MakeMatchesParameters) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BackfillMakeMatchesRequest_MakeMatchesParameters) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *BackfillMakeMatchesRequest_MakeMatchesParameters) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *BackfillMakeMatchesRequest_MakeMatchesParameters) GetTickId() uint64 {
	if x != nil {
		return x.TickId
	}
	return 0
}

type BackfillTicket_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Parties []*Party `protobuf:"bytes,2,rep,name=parties,proto3" json:"parties,omitempty"`
	TeamId  string   `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *BackfillTicket_Team) Reset() {
	*x = BackfillTicket_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillTicket_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillTicket_Team) ProtoMessage() {}

func (x *BackfillTicket_Team) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillTicket_Team.ProtoReflect.Descriptor instead.
func (*BackfillTicket_Team) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{17, 0}
}

func (x *BackfillTicket_Team) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *BackfillTicket_Team) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *BackfillTicket_Team) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type BackfillTicket_PartialMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets           []*Ticket              `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Teams             []*BackfillTicket_Team `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
	RegionPreferences []string               `protobuf:"bytes,3,rep,name=region_preferences,json=regionPreferences,proto3" json:"region_preferences,omitempty"`
	MatchAttributes   *structpb.Struct       `protobuf:"bytes,4,opt,name=match_attributes,json=matchAttributes,proto3" json:"match_attributes,omitempty"`
	Backfill          bool                   `protobuf:"varint,5,opt,name=backfill,proto3" json:"backfill,omitempty"`
	ServerName        string                 `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ClientVersion     string                 `protobuf:"bytes,7,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *BackfillTicket_PartialMatch) Reset() {
	*x = BackfillTicket_PartialMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchFunction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillTicket_PartialMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillTicket_PartialMatch) ProtoMessage() {}

func (x *BackfillTicket_PartialMatch) ProtoReflect() protoreflect.Message {
	mi := &file_matchFunction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillTicket_PartialMatch.ProtoReflect.Descriptor instead.
func (*BackfillTicket_PartialMatch) Descriptor() ([]byte, []int) {
	return file_matchFunction_proto_rawDescGZIP(), []int{17, 1}
}

func (x *BackfillTicket_PartialMatch) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *BackfillTicket_PartialMatch) GetTeams() []*BackfillTicket_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *BackfillTicket_PartialMatch) GetRegionPreferences() []string {
	if x != nil {
		return x.RegionPreferences
	}
	return nil
}

func (x *BackfillTicket_PartialMatch) GetMatchAttributes() *structpb.Struct {
	if x != nil {
		return x.MatchAttributes
	}
	return nil
}

func (x *BackfillTicket_PartialMatch) GetBackfill() bool {
	if x != nil {
		return x.Backfill
	}
	return false
}

func (x *BackfillTicket_PartialMatch) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *BackfillTicket_PartialMatch) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

var File_matchFunction_proto protoreflect.FileDescriptor

var file_matchFunction_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x3b,
	0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x13,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x14, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x92, 0x03, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xb3, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x6b, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x40, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22,
	0x27, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x62, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x62, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0xc1, 0x04, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45,
	0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x80, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xda,
	0x04, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x50, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x44, 0x0a, 0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x62, 0x0a, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x04, 0x0a, 0x10,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x80, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x82, 0x04, 0x0a, 0x1a, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x6b, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xb3, 0x01, 0x0a, 0x15, 0x4d, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x76, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x99, 0x06, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x65, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x1a, 0x80, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x1a, 0xfc, 0x02, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x32, 0xb4, 0x05, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79,
	0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62,
	0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74,
	0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0b, 0x4d, 0x61,
	0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3f,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x61, 0x6b,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x80, 0x01, 0x0a, 0x29, 0x6e,
	0x65, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x32, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x29, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x62, 0x79, 0x74, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0xaa, 0x02, 0x25, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_matchFunction_proto_rawDescOnce sync.Once
	file_matchFunction_proto_rawDescData = file_matchFunction_proto_rawDesc
)

func file_matchFunction_proto_rawDescGZIP() []byte {
	file_matchFunction_proto_rawDescOnce.Do(func() {
		file_matchFunction_proto_rawDescData = protoimpl.X.CompressGZIP(file_matchFunction_proto_rawDescData)
	})
	return file_matchFunction_proto_rawDescData
}

var file_matchFunction_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_matchFunction_proto_goTypes = []interface{}{
	(*GetStatCodesRequest)(nil),                      // 0: accelbyte.matchmaking.matchfunction.GetStatCodesRequest
	(*StatCodesResponse)(nil),                        // 1: accelbyte.matchmaking.matchfunction.StatCodesResponse
	(*ValidateTicketRequest)(nil),                    // 2: accelbyte.matchmaking.matchfunction.ValidateTicketRequest
	(*ValidateTicketResponse)(nil),                   // 3: accelbyte.matchmaking.matchfunction.ValidateTicketResponse
	(*EnrichTicketRequest)(nil),                      // 4: accelbyte.matchmaking.matchfunction.EnrichTicketRequest
	(*EnrichTicketResponse)(nil),                     // 5: accelbyte.matchmaking.matchfunction.EnrichTicketResponse
	(*MakeMatchesRequest)(nil),                       // 6: accelbyte.matchmaking.matchfunction.MakeMatchesRequest
	(*MatchResponse)(nil),                            // 7: accelbyte.matchmaking.matchfunction.MatchResponse
	(*Scope)(nil),                                    // 8: accelbyte.matchmaking.matchfunction.Scope
	(*Rules)(nil),                                    // 9: accelbyte.matchmaking.matchfunction.Rules
	(*Party)(nil),                                    // 10: accelbyte.matchmaking.matchfunction.Party
	(*Match)(nil),                                    // 11: accelbyte.matchmaking.matchfunction.Match
	(*ServerPool)(nil),                               // 12: accelbyte.matchmaking.matchfunction.ServerPool
	(*Ticket)(nil),                                   // 13: accelbyte.matchmaking.matchfunction.Ticket
	(*BackfillProposal)(nil),                         // 14: accelbyte.matchmaking.matchfunction.BackfillProposal
	(*BackfillMakeMatchesRequest)(nil),               // 15: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest
	(*BackfillResponse)(nil),                         // 16: accelbyte.matchmaking.matchfunction.BackfillResponse
	(*BackfillTicket)(nil),                           // 17: accelbyte.matchmaking.matchfunction.BackfillTicket
	(*MakeMatchesRequest_MakeMatchesParameters)(nil), // 18: accelbyte.matchmaking.matchfunction.MakeMatchesRequest.MakeMatchesParameters
	(*Match_Team)(nil),                               // 19: accelbyte.matchmaking.matchfunction.Match.Team
	(*Ticket_PlayerData)(nil),                        // 20: accelbyte.matchmaking.matchfunction.Ticket.PlayerData
	nil,                                              // 21: accelbyte.matchmaking.matchfunction.Ticket.LatenciesEntry
	(*BackfillProposal_Team)(nil),                    // 22: accelbyte.matchmaking.matchfunction.BackfillProposal.Team
	(*BackfillMakeMatchesRequest_MakeMatchesParameters)(nil), // 23: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.MakeMatchesParameters
	(*BackfillTicket_Team)(nil),                              // 24: accelbyte.matchmaking.matchfunction.BackfillTicket.Team
	(*BackfillTicket_PartialMatch)(nil),                      // 25: accelbyte.matchmaking.matchfunction.BackfillTicket.PartialMatch
	(*structpb.Struct)(nil),                                  // 26: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                            // 27: google.protobuf.Timestamp
}
var file_matchFunction_proto_depIdxs = []int32{
	9,  // 0: accelbyte.matchmaking.matchfunction.GetStatCodesRequest.rules:type_name -> accelbyte.matchmaking.matchfunction.Rules
	13, // 1: accelbyte.matchmaking.matchfunction.ValidateTicketRequest.ticket:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	9,  // 2: accelbyte.matchmaking.matchfunction.ValidateTicketRequest.rules:type_name -> accelbyte.matchmaking.matchfunction.Rules
	13, // 3: accelbyte.matchmaking.matchfunction.EnrichTicketRequest.ticket:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	9,  // 4: accelbyte.matchmaking.matchfunction.EnrichTicketRequest.rules:type_name -> accelbyte.matchmaking.matchfunction.Rules
	13, // 5: accelbyte.matchmaking.matchfunction.EnrichTicketResponse.ticket:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	18, // 6: accelbyte.matchmaking.matchfunction.MakeMatchesRequest.parameters:type_name -> accelbyte.matchmaking.matchfunction.MakeMatchesRequest.MakeMatchesParameters
	13, // 7: accelbyte.matchmaking.matchfunction.MakeMatchesRequest.ticket:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	11, // 8: accelbyte.matchmaking.matchfunction.MatchResponse.match:type_name -> accelbyte.matchmaking.matchfunction.Match
	13, // 9: accelbyte.matchmaking.matchfunction.Match.tickets:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	19, // 10: accelbyte.matchmaking.matchfunction.Match.teams:type_name -> accelbyte.matchmaking.matchfunction.Match.Team
	26, // 11: accelbyte.matchmaking.matchfunction.Match.match_attributes:type_name -> google.protobuf.Struct
	12, // 12: accelbyte.matchmaking.matchfunction.Match.server_pool:type_name -> accelbyte.matchmaking.matchfunction.ServerPool
	27, // 13: accelbyte.matchmaking.matchfunction.Ticket.CreatedAt:type_name -> google.protobuf.Timestamp
	20, // 14: accelbyte.matchmaking.matchfunction.Ticket.players:type_name -> accelbyte.matchmaking.matchfunction.Ticket.PlayerData
	26, // 15: accelbyte.matchmaking.matchfunction.Ticket.ticket_attributes:type_name -> google.protobuf.Struct
	21, // 16: accelbyte.matchmaking.matchfunction.Ticket.latencies:type_name -> accelbyte.matchmaking.matchfunction.Ticket.LatenciesEntry
	27, // 17: accelbyte.matchmaking.matchfunction.BackfillProposal.CreatedAt:type_name -> google.protobuf.Timestamp
	13, // 18: accelbyte.matchmaking.matchfunction.BackfillProposal.added_tickets:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	22, // 19: accelbyte.matchmaking.matchfunction.BackfillProposal.proposed_teams:type_name -> accelbyte.matchmaking.matchfunction.BackfillProposal.Team
	23, // 20: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.parameters:type_name -> accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.MakeMatchesParameters
	17, // 21: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.backfill_ticket:type_name -> accelbyte.matchmaking.matchfunction.BackfillTicket
	13, // 22: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.ticket:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	14, // 23: accelbyte.matchmaking.matchfunction.BackfillResponse.backfill_proposal:type_name -> accelbyte.matchmaking.matchfunction.BackfillProposal
	27, // 24: accelbyte.matchmaking.matchfunction.BackfillTicket.CreatedAt:type_name -> google.protobuf.Timestamp
	25, // 25: accelbyte.matchmaking.matchfunction.BackfillTicket.partial_match:type_name -> accelbyte.matchmaking.matchfunction.BackfillTicket.PartialMatch
	8,  // 26: accelbyte.matchmaking.matchfunction.MakeMatchesRequest.MakeMatchesParameters.scope:type_name -> accelbyte.matchmaking.matchfunction.Scope
	9,  // 27: accelbyte.matchmaking.matchfunction.MakeMatchesRequest.MakeMatchesParameters.rules:type_name -> accelbyte.matchmaking.matchfunction.Rules
	10, // 28: accelbyte.matchmaking.matchfunction.Match.Team.parties:type_name -> accelbyte.matchmaking.matchfunction.Party
	26, // 29: accelbyte.matchmaking.matchfunction.Ticket.PlayerData.attributes:type_name -> google.protobuf.Struct
	10, // 30: accelbyte.matchmaking.matchfunction.BackfillProposal.Team.parties:type_name -> accelbyte.matchmaking.matchfunction.Party
	8,  // 31: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.MakeMatchesParameters.scope:type_name -> accelbyte.matchmaking.matchfunction.Scope
	9,  // 32: accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest.MakeMatchesParameters.rules:type_name -> accelbyte.matchmaking.matchfunction.Rules
	10, // 33: accelbyte.matchmaking.matchfunction.BackfillTicket.Team.parties:type_name -> accelbyte.matchmaking.matchfunction.Party
	13, // 34: accelbyte.matchmaking.matchfunction.BackfillTicket.PartialMatch.tickets:type_name -> accelbyte.matchmaking.matchfunction.Ticket
	24, // 35: accelbyte.matchmaking.matchfunction.BackfillTicket.PartialMatch.teams:type_name -> accelbyte.matchmaking.matchfunction.BackfillTicket.Team
	26, // 36: accelbyte.matchmaking.matchfunction.BackfillTicket.PartialMatch.match_attributes:type_name -> google.protobuf.Struct
	0,  // 37: accelbyte.matchmaking.matchfunction.MatchFunction.GetStatCodes:input_type -> accelbyte.matchmaking.matchfunction.GetStatCodesRequest
	2,  // 38: accelbyte.matchmaking.matchfunction.MatchFunction.ValidateTicket:input_type -> accelbyte.matchmaking.matchfunction.ValidateTicketRequest
	4,  // 39: accelbyte.matchmaking.matchfunction.MatchFunction.EnrichTicket:input_type -> accelbyte.matchmaking.matchfunction.EnrichTicketRequest
	6,  // 40: accelbyte.matchmaking.matchfunction.MatchFunction.MakeMatches:input_type -> accelbyte.matchmaking.matchfunction.MakeMatchesRequest
	15, // 41: accelbyte.matchmaking.matchfunction.MatchFunction.BackfillMatches:input_type -> accelbyte.matchmaking.matchfunction.BackfillMakeMatchesRequest
	1,  // 42: accelbyte.matchmaking.matchfunction.MatchFunction.GetStatCodes:output_type -> accelbyte.matchmaking.matchfunction.StatCodesResponse
	3,  // 43: accelbyte.matchmaking.matchfunction.MatchFunction.ValidateTicket:output_type -> accelbyte.matchmaking.matchfunction.ValidateTicketResponse
	5,  // 44: accelbyte.matchmaking.matchfunction.MatchFunction.EnrichTicket:output_type -> accelbyte.matchmaking.matchfunction.EnrichTicketResponse
	7,  // 45: accelbyte.matchmaking.matchfunction.MatchFunction.MakeMatches:output_type -> accelbyte.matchmaking.matchfunction.MatchResponse
	16, // 46: accelbyte.matchmaking.matchfunction.MatchFunction.BackfillMatches:output_type -> accelbyte.matchmaking.matchfunction.BackfillResponse
	42, // [42:47] is the sub-list for method output_type
	37, // [37:42] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_matchFunction_proto_init() }
func file_matchFunction_proto_init() {
	if File_matchFunction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_matchFunction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillMakeMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMatchesRequest_MakeMatchesParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket_PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillProposal_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillMakeMatchesRequest_MakeMatchesParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillTicket_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchFunction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillTicket_PartialMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_matchFunction_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MakeMatchesRequest_Parameters)(nil),
		(*MakeMatchesRequest_Ticket)(nil),
	}
	file_matchFunction_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*BackfillMakeMatchesRequest_Parameters)(nil),
		(*BackfillMakeMatchesRequest_BackfillTicket)(nil),
		(*BackfillMakeMatchesRequest_Ticket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matchFunction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matchFunction_proto_goTypes,
		DependencyIndexes: file_matchFunction_proto_depIdxs,
		MessageInfos:      file_matchFunction_proto_msgTypes,
	}.Build()
	File_matchFunction_proto = out.File
	file_matchFunction_proto_rawDesc = nil
	file_matchFunction_proto_goTypes = nil
	file_matchFunction_proto_depIdxs = nil
}

// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: matchFunction.proto

package matchfunction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchFunctionClient is the client API for MatchFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchFunctionClient interface {
	GetStatCodes(ctx context.Context, in *GetStatCodesRequest, opts ...grpc.CallOption) (*StatCodesResponse, error)
	ValidateTicket(ctx context.Context, in *ValidateTicketRequest, opts ...grpc.CallOption) (*ValidateTicketResponse, error)
	EnrichTicket(ctx context.Context, in *EnrichTicketRequest, opts ...grpc.CallOption) (*EnrichTicketResponse, error)
	MakeMatches(ctx context.Context, opts ...grpc.CallOption) (MatchFunction_MakeMatchesClient, error)
	BackfillMatches(ctx context.Context, opts ...grpc.CallOption) (MatchFunction_BackfillMatchesClient, error)
}

type matchFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchFunctionClient(cc grpc.ClientConnInterface) MatchFunctionClient {
	return &matchFunctionClient{cc}
}

func (c *matchFunctionClient) GetStatCodes(ctx context.Context, in *GetStatCodesRequest, opts ...grpc.CallOption) (*StatCodesResponse, error) {
	out := new(StatCodesResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.matchmaking.matchfunction.MatchFunction/GetStatCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchFunctionClient) ValidateTicket(ctx context.Context, in *ValidateTicketRequest, opts ...grpc.CallOption) (*ValidateTicketResponse, error) {
	out := new(ValidateTicketResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.matchmaking.matchfunction.MatchFunction/ValidateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchFunctionClient) EnrichTicket(ctx context.Context, in *EnrichTicketRequest, opts ...grpc.CallOption) (*EnrichTicketResponse, error) {
	out := new(EnrichTicketResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.matchmaking.matchfunction.MatchFunction/EnrichTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchFunctionClient) MakeMatches(ctx context.Context, opts ...grpc.CallOption) (MatchFunction_MakeMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchFunction_ServiceDesc.Streams[0], "/accelbyte.matchmaking.matchfunction.MatchFunction/MakeMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchFunctionMakeMatchesClient{stream}
	return x, nil
}

type MatchFunction_MakeMatchesClient interface {
	Send(*MakeMatchesRequest) error
	Recv() (*MatchResponse, error)
	grpc.ClientStream
}

type matchFunctionMakeMatchesClient struct {
	grpc.ClientStream
}

func (x *matchFunctionMakeMatchesClient) Send(m *MakeMatchesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *matchFunctionMakeMatchesClient) Recv() (*MatchResponse, error) {
	m := new(MatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *matchFunctionClient) BackfillMatches(ctx context.Context, opts ...grpc.CallOption) (MatchFunction_BackfillMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchFunction_ServiceDesc.Streams[1], "/accelbyte.matchmaking.matchfunction.MatchFunction/BackfillMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchFunctionBackfillMatchesClient{stream}
	return x, nil
}

type MatchFunction_BackfillMatchesClient interface {
	Send(*BackfillMakeMatchesRequest) error
	Recv() (*BackfillResponse, error)
	grpc.ClientStream
}

type matchFunctionBackfillMatchesClient struct {
	grpc.ClientStream
}

func (x *matchFunctionBackfillMatchesClient) Send(m *BackfillMakeMatchesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *matchFunctionBackfillMatchesClient) Recv() (*BackfillResponse, error) {
	m := new(BackfillResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchFunctionServer is the server API for MatchFunction service.
// All implementations must embed UnimplementedMatchFunctionServer
// for forward compatibility
type MatchFunctionServer interface {
	GetStatCodes(context.Context, *GetStatCodesRequest) (*StatCodesResponse, error)
	ValidateTicket(context.Context, *ValidateTicketRequest) (*ValidateTicketResponse, error)
	EnrichTicket(context.Context, *EnrichTicketRequest) (*EnrichTicketResponse, error)
	MakeMatches(MatchFunction_MakeMatchesServer) error
	BackfillMatches(MatchFunction_BackfillMatchesServer) error
	mustEmbedUnimplementedMatchFunctionServer()
}

// UnimplementedMatchFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedMatchFunctionServer struct {
}

func (UnimplementedMatchFunctionServer) GetStatCodes(context.Context, *GetStatCodesRequest) (*StatCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatCodes not implemented")
}
func (UnimplementedMatchFunctionServer) ValidateTicket(context.Context, *ValidateTicketRequest) (*ValidateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTicket not implemented")
}
func (UnimplementedMatchFunctionServer) EnrichTicket(context.Context, *EnrichTicketRequest) (*EnrichTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichTicket not implemented")
}
func (UnimplementedMatchFunctionServer) MakeMatches(MatchFunction_MakeMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method MakeMatches not implemented")
}
func (UnimplementedMatchFunctionServer) BackfillMatches(MatchFunction_BackfillMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method BackfillMatches not implemented")
}
func (UnimplementedMatchFunctionServer) mustEmbedUnimplementedMatchFunctionServer() {}

// UnsafeMatchFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchFunctionServer will
// result in compilation errors.
type UnsafeMatchFunctionServer interface {
	mustEmbedUnimplementedMatchFunctionServer()
}

func RegisterMatchFunctionServer(s grpc.ServiceRegistrar, srv MatchFunctionServer) {
	s.RegisterService(&MatchFunction_ServiceDesc, srv)
}

func _MatchFunction_GetStatCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchFunctionServer).GetStatCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.matchmaking.matchfunction.MatchFunction/GetStatCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchFunctionServer).GetStatCodes(ctx, req.(*GetStatCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchFunction_ValidateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchFunctionServer).ValidateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.matchmaking.matchfunction.MatchFunction/ValidateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchFunctionServer).ValidateTicket(ctx, req.(*ValidateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchFunction_EnrichTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchFunctionServer).EnrichTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.matchmaking.matchfunction.MatchFunction/EnrichTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchFunctionServer).EnrichTicket(ctx, req.(*EnrichTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchFunction_MakeMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatchFunctionServer).MakeMatches(&matchFunctionMakeMatchesServer{stream})
}

type MatchFunction_MakeMatchesServer interface {
	Send(*MatchResponse) error
	Recv() (*MakeMatchesRequest, error)
	grpc.ServerStream
}

type matchFunctionMakeMatchesServer struct {
	grpc.ServerStream
}

func (x *matchFunctionMakeMatchesServer) Send(m *MatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *matchFunctionMakeMatchesServer) Recv() (*MakeMatchesRequest, error) {
	m := new(MakeMatchesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MatchFunction_BackfillMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatchFunctionServer).BackfillMatches(&matchFunctionBackfillMatchesServer{stream})
}

type MatchFunction_BackfillMatchesServer interface {
	Send(*BackfillResponse) error
	Recv() (*BackfillMakeMatchesRequest, error)
	grpc.ServerStream
}

type matchFunctionBackfillMatchesServer struct {
	grpc.ServerStream
}

func (x *matchFunctionBackfillMatchesServer) Send(m *BackfillResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *matchFunctionBackfillMatchesServer) Recv() (*BackfillMakeMatchesRequest, error) {
	m := new(BackfillMakeMatchesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchFunction_ServiceDesc is the grpc.ServiceDesc for MatchFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.matchmaking.matchfunction.MatchFunction",
	HandlerType: (*MatchFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatCodes",
			Handler:    _MatchFunction_GetStatCodes_Handler,
		},
		{
			MethodName: "ValidateTicket",
			Handler:    _MatchFunction_ValidateTicket_Handler,
		},
		{
			MethodName: "EnrichTicket",
			Handler:    _MatchFunction_EnrichTicket_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MakeMatches",
			Handler:       _MatchFunction_MakeMatches_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BackfillMatches",
			Handler:       _MatchFunction_BackfillMatches_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "matchFunction.proto",
}
